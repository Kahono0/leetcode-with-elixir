defmodule TwoSum do
  @moduledoc """
  Two Sum problem
  Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
  # Example:
  iex> Solution.two_sum([2,7,11,15], 9)
  [0, 1]

  # Solution:
  Create a map that stores the difference of the target and the current number as the key and the index as the value.
  If number is in the map, return the index of the number and the value of the map.
  If number is not in the map, add the number as the key and the index as the value.
  """
  @spec two_sum(nums :: [integer], target :: integer) :: [integer]
  def two_sum(nums, target) do
    map = %{}
    0..length(nums) - 1
    |> Enum.map(fn i ->
      val = Enum.at(nums, i)
      # if target - val is in the map, return the index of the number and the value of the map
      IO.puts "Checking if #{target - val} is in the map"
      if Map.has_key?(map, target - val) do
        [Map.get(map, target - val), i]
      # if target - val is not in the map, add the number as the key and the index as the value
      else
        IO.puts "Adding #{val} as key and #{i} as value"
        Map.put(map, val, i)
        nil
      end
    end)
  end
end
